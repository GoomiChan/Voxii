{"version":3,"sources":["Voxii.Core.js","Voxii.MagickaVox.js","Voxii.Slab.js","Voxii.Qb.js","Voxii.Embed.js","OrbitControls.js"],"names":["Voxii","simpleMesher","voxelData","console","time","solidBlocks","i","voxels","length","nullColor","timeEnd","log","geometry","THREE","BufferGeometry","verts","Float32Array","uvs","uvIdx","x","dims","y","z","voxel","self","get3dArrayIdx","set","applyColorUVs","numColors","addAttribute","BufferAttribute","computeVertexNormals","colorIdx","seg","color","createPaletteTexture","colors","RGBA","Uint8Array","tex","DataTexture","RGBAFormat","needsUpdate","wrapS","wrapT","ClampToEdgeWrapping","magFilter","NearestFilter","minFilter","CreateThreeJsObject","voxelModels","group","Group","model","CreateMesh","add","voxelModel","palette","mat","MeshLambertMaterial","map","shading","SmoothShading","mesh","Mesh","pos","position","castShadow","bbox","BoxGeometry","MeshBasicMaterial","wireframe","name","visible","applyMatrix","Matrix4","makeTranslation","rotation","rotateY","Math","PI","CheckModelFormat","fileName","view","fileExt","split","pop","toLowerCase","format","magic","getString","formats","VOX","SLAB","QB","seek","Test","data","ConPrint","LoadModel","url","callback","dataBuffer","load","jDataView","LoadVox","byteLength","LoadSlab","LoadQb","error","threeModel","loader","XHRLoader","setResponseType","size","Core","ReadChunkHeader","head","id","getInt32","childSize","defaultPalette","consts","MAGIC","VERSION","dataLen","sizeX","sizeY","sizeZ","getChar","join","version","mainHead","tell","chunkHead","getUint32","numVoxels","getUint8","push","is","skip","zAxisOrientation","compressed","numMatrices","models","matID","getColorIdx","mask","indexOf","index","count","j","floor","CreateEmbed","opts","parentElm","width","clientWidth","height","clientHeight","canvas","document","createElement","style","zIndex","embed","CreateBasicStage","clickDiv","CreateClickToLoadDiv","appendChild","conf","modelPath","getAttribute","embeds","renderer","scene","camera","controls","voxModel","WebGLRenderer","antialias","alpha","EmbedConf","TransparentCanvas","setSize","shadowMapEnabled","shadowMapSoft","Scene","PerspectiveCamera","Fov","lookAt","OrbitControls","damping","addEventListener","activeEmbed","SetActiveEmbed","Render","amblight","AmbientLight","setRGB","fill","SpotLight","target","shadowCameraNear","shadowCameraFar","shadowCameraVisible","intensity","back","key","shadowMapWidth","shadowMapHeight","d","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowBias","shadowDarkness","visibility","remove","render","parent","cont","div","top","background","fontSize","textAlign","fontFamily","lineHeight","userSelect","MozUserSelect","webkitUserSelect","innerHTML","onclick","Update","requestAnimationFrame","clock","getDelta","update","Clock","Classname","Background","CreateEmbeds","elements","querySelectorAll","object","domElement","getAutoRotationAngle","scope","autoRotateSpeed","getZoomScale","pow","zoomSpeed","onMouseDown","event","enabled","preventDefault","button","mouseButtons","ORBIT","noRotate","state","STATE","ROTATE","rotateStart","clientX","clientY","ZOOM","noZoom","DOLLY","dollyStart","PAN","noPan","panStart","NONE","onMouseMove","onMouseUp","dispatchEvent","startEvent","element","body","rotateEnd","rotateDelta","subVectors","rotateLeft","rotateSpeed","rotateUp","copy","dollyEnd","dollyDelta","dollyIn","dollyOut","panEnd","panDelta","pan","removeEventListener","endEvent","onMouseWheel","stopPropagation","delta","undefined","wheelDelta","detail","onKeyDown","noKeys","keyCode","keys","UP","keyPanSpeed","BOTTOM","LEFT","RIGHT","touchstart","touches","TOUCH_ROTATE","pageX","pageY","TOUCH_DOLLY","dx","dy","distance","sqrt","TOUCH_PAN","touchmove","touchend","this","Vector3","center","minDistance","maxDistance","Infinity","minZoom","maxZoom","autoRotate","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","MOUSE","MIDDLE","theta","phi","EPS","Vector2","panOffset","offset","phiDelta","thetaDelta","scale","lastPosition","lastQuaternion","Quaternion","target0","clone","position0","zoom0","zoom","quat","setFromUnitVectors","up","quatInverse","inverse","changeEvent","type","angle","panLeft","te","matrix","multiplyScalar","panUp","deltaX","deltaY","sub","targetDistance","tan","fov","OrthographicCamera","right","left","bottom","warn","dollyScale","max","min","updateProjectionMatrix","applyQuaternion","atan2","radius","sin","cos","distanceToSquared","dot","quaternion","reset","getPolarAngle","getAzimuthalAngle","window","prototype","Object","create","EventDispatcher","constructor"],"mappings":"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","file":"Voxii.js","sourcesContent":["//=============================\r\n// Voxii voxel viewer\r\n// p.s Trying to make the code nice and readable :>\r\n// Arkii\r\n//=============================\r\n\r\nvar Voxii = (function ()\r\n{\r\n    var self = {};\r\n    var formats =\r\n    {\r\n        SLAB: 0,\r\n        VOX: 1,\r\n        QB: 2\r\n    };\r\n\r\n    self.Test = function(data)\r\n    {\r\n        ConPrint(\"Voxii::Test\");\r\n    };\r\n\r\n    // Load any model\r\n    self.LoadModel = function(url, callback, dataBuffer)\r\n    {\r\n        // Get the model\r\n        if (dataBuffer)\r\n            load(dataBuffer);\r\n        else\r\n        {\r\n            var loader = new THREE.XHRLoader();\r\n            loader.setResponseType(\"arraybuffer\");\r\n            loader.load(url, function (data)\r\n            {\r\n                load(data);\r\n            });\r\n        }\r\n\r\n        function load(data)\r\n        {\r\n            var view = new jDataView(data, 0, data.length, true);\r\n            var format = CheckModelFormat(url, view);\r\n\r\n            console.time('Load Model');\r\n            var voxelData = null;\r\n            if (format == formats.VOX)\r\n                voxelData = self.LoadVox(view, data.byteLength);\r\n            else if (format == formats.SLAB)\r\n                voxelData = self.LoadSlab(view, data.byteLength);\r\n            else if (format == formats.QB)\r\n                voxelData = self.LoadQb(view, data.byteLength);\r\n            else\r\n                console.error(\"Voxel model format is not suported, sorry :<\");\r\n            console.timeEnd('Load Model');\r\n\r\n            var threeModel = CreateThreeJsObject(voxelData);\r\n            callback(threeModel, voxelData);\r\n        }\r\n    };\r\n\r\n    // Meshers\r\n    //---------------------------\r\n\r\n    // Make a mesh from the voxel data by using a quad per face\r\n    function simpleMesher(voxelData)\r\n    {\r\n        console.time('visible voxels');\r\n\r\n        var solidBlocks = 0;\r\n        for (var i = 0; i < voxelData.voxels.length; i++)\r\n        {\r\n            if (voxelData[i] != voxelData.nullColor)\r\n                solidBlocks++;\r\n        }\r\n        console.timeEnd('visible voxels');\r\n\r\n        console.log(\"solidBlocks: \"+solidBlocks);\r\n\r\n        console.time('simpleMesher');\r\n        var geometry = new THREE.BufferGeometry();\r\n        var verts = new Float32Array(solidBlocks*(6*3)*6); // Go big, shrink later\r\n        var uvs = new Float32Array(solidBlocks*(6*2)*6);\r\n\r\n        var i = 0;\r\n        var uvIdx = 0;\r\n        for (var x = 0; x < voxelData.dims.x; x++)\r\n        {\r\n            for (var y = 0; y < voxelData.dims.y; y++)\r\n            {\r\n                for (var z = 0; z < voxelData.dims.z; z++)\r\n                {\r\n                    var voxel = voxelData.voxels[self.get3dArrayIdx(voxelData.dims, x, y, z)];\r\n                    if (voxel != voxelData.nullColor) // null voxels are 0\r\n                    {\r\n                        if (x+1>=voxelData.dims.x || (voxelData.voxels[self.get3dArrayIdx(voxelData.dims, x+1, y, z)]) == voxelData.nullColor) // right\r\n                        {\r\n                            verts.set(\r\n                                [\r\n                                    1+x,0+y,0+z,\r\n                                    1+x,1+y,0+z,\r\n                                    1+x,1+y,1+z,\r\n\r\n                                    1+x,1+y,1+z,\r\n                                    1+x,0+y,1+z,\r\n                                    1+x,0+y,0+z\r\n                                ], i);\r\n                            i += 18;\r\n\r\n                            uvs.set(applyColorUVs(voxel, voxelData.numColors), uvIdx);\r\n                            uvIdx += 12;\r\n                        }\r\n                        if (x-1<0 || (voxelData.voxels[self.get3dArrayIdx(voxelData.dims, x-1, y, z)]) == voxelData.nullColor) // left\r\n                        {\r\n                            verts.set(\r\n                                [\r\n                                    0+x,1+y,1+z,\r\n                                    0+x,1+y,0+z,\r\n                                    0+x,0+y,0+z,\r\n\r\n                                    0+x,0+y,0+z,\r\n                                    0+x,0+y,1+z,\r\n                                    0+x,1+y,1+z\r\n                                ], i);\r\n                            i += 18;\r\n\r\n                            uvs.set(applyColorUVs(voxel, voxelData.numColors), uvIdx);\r\n                            uvIdx += 12;\r\n                        }\r\n\r\n                        if ((y-1<0) || (voxelData.voxels[self.get3dArrayIdx(voxelData.dims, x, y-1, z)]) == voxelData.nullColor) // back\r\n                        {\r\n                            verts.set(\r\n                                [\r\n                                    0+x,0+y,0+z,\r\n                                    1+x,0+y,0+z,\r\n                                    1+x,0+y,1+z,\r\n\r\n                                    1+x,0+y,1+z,\r\n                                    0+x,0+y,1+z,\r\n                                    0+x,0+y,0+z\r\n                                ], i);\r\n                            i += 18;\r\n\r\n                            uvs.set(applyColorUVs(voxel, voxelData.numColors), uvIdx);\r\n                            uvIdx += 12;\r\n                        }\r\n                        if ((y+1>=voxelData.dims.y) || (voxelData.voxels[self.get3dArrayIdx(voxelData.dims, x, y+1, z)]) == voxelData.nullColor) // front\r\n                        {\r\n                            verts.set(\r\n                                [\r\n                                    1+x,1+y,1+z,\r\n                                    1+x,1+y,0+z,\r\n                                    0+x,1+y,0+z,\r\n\r\n                                    0+x,1+y,0+z,\r\n                                    0+x,1+y,1+z,\r\n                                    1+x,1+y,1+z\r\n                                ], i);\r\n                            i += 18;\r\n\r\n                            uvs.set(applyColorUVs(voxel, voxelData.numColors), uvIdx);\r\n                            uvIdx += 12;\r\n                        }\r\n\r\n                        if ((z-1<0) || (voxelData.voxels[self.get3dArrayIdx(voxelData.dims, x, y, z-1)]) == voxelData.nullColor) // bottom\r\n                        {\r\n                            verts.set(\r\n                                [\r\n                                    0+x,1+y,0+z,\r\n                                    1+x,1+y,0+z,\r\n                                    1+x,0+y,0+z,\r\n\r\n                                    0+x,0+y,0+z,\r\n                                    0+x,1+y,0+z,\r\n                                    1+x,0+y,0+z\r\n                                ], i);\r\n                            i += 18;\r\n\r\n                            uvs.set(applyColorUVs(voxel, voxelData.numColors), uvIdx);\r\n                            uvIdx += 12;\r\n                        }\r\n                        if (z+1>=voxelData.dims.z || (voxelData.voxels[self.get3dArrayIdx(voxelData.dims, x, y, z+1)]) == voxelData.nullColor) // top\r\n                        {\r\n                            verts.set(\r\n                                [\r\n                                    1+x,0+y,1+z,\r\n                                    1+x,1+y,1+z,\r\n                                    0+x,1+y,1+z,\r\n\r\n                                    1+x,0+y,1+z,\r\n                                    0+x,1+y,1+z,\r\n                                    0+x,0+y,1+z\r\n                                ], i);\r\n                            i += 18;\r\n\r\n                            uvs.set(applyColorUVs(voxel, voxelData.numColors), uvIdx);\r\n                            uvIdx += 12;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        verts = new Float32Array(verts, i);\r\n        uvs = new Float32Array(uvs, uvIdx);\r\n        geometry.addAttribute('position', new THREE.BufferAttribute(verts, 3));\r\n        geometry.addAttribute('uv', new THREE.BufferAttribute(uvs, 2));\r\n\r\n        geometry.computeVertexNormals();\r\n        console.timeEnd(\"simpleMesher\");\r\n\r\n        return geometry;\r\n    }\r\n\r\n    // output a pointcloud object representing the voxel model\r\n    function pointCloudTest(voxelData)\r\n    {\r\n        var geometry = new THREE.Geometry();\r\n\r\n        for (var x = 0; x < voxelData.dims.x; x++)\r\n        {\r\n            for (var y = 0; y < voxelData.dims.y; y++)\r\n            {\r\n                for (var z = 0; z < voxelData.dims.z; z++)\r\n                {\r\n                    var voxel = voxelData.voxels[get3dArrayIdx(voxelData.dims, x, y, z)];\r\n                    if (voxel > 0) // null voxels are 0\r\n                    {\r\n                        geometry.vertices.push( new THREE.Vector3(x, y, z));\r\n                        var color = voxelData.palette[voxel];\r\n                        if (color)\r\n                            geometry.colors.push(new THREE.Color( color.r/255, color.g/255, color.b/255));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        var mat = new THREE.PointCloudMaterial();\r\n        mat.vertexColors = THREE.VertexColors;\r\n        mat.size = 1.5;\r\n        var PointCloud = new THREE.PointCloud(geometry, mat);\r\n        PointCloud.rotation.x = 270*(Math.PI/180);\r\n        return PointCloud;\r\n    }\r\n\r\n    // Misc helpers\r\n    //---------------------------\r\n    // I wonder if the function call overhead is worth worrying about?\r\n    self.get3dArrayIdx = function(size, x, y, z)\r\n    {\r\n        return x*size.y*size.z + y*size.z + z;\r\n    };\r\n\r\n    function applyColorUVs(colorIdx, numColors)\r\n    {\r\n        var faceVertexUvs = [[]];\r\n        var seg = (1/numColors);\r\n        var color = seg*(colorIdx);\r\n        return [\r\n            color+0.0001,1, color+0.0001,1,\r\n            color+0.0001,0, color+0.0001,1,\r\n            color+0.0001,0, color+0.0001,1,\r\n            color+0.0001,1, color+0.0001,1\r\n        ];\r\n    }\r\n\r\n    function createPaletteTexture(colors)\r\n    {\r\n        var RGBA = new Uint8Array(colors.length*4);\r\n\r\n        for (var i = 0; i < colors.length; i++)\r\n        {\r\n            var color = colors[i];\r\n            RGBA[i*4] = color & 0xFF;\r\n            RGBA[i*4+1] = color >> 8 & 0xFF;\r\n            RGBA[i*4+2] = color >> 16 & 0xFF;\r\n            RGBA[i*4+3] = color >> 24 & 0xFF;\r\n        }\r\n\r\n        var tex = new THREE.DataTexture(RGBA, colors.length, 1, THREE.RGBAFormat );\r\n        tex.needsUpdate = true;\r\n        tex.wrapS = tex.wrapT = THREE.ClampToEdgeWrapping;\r\n        tex.magFilter = THREE.NearestFilter;\r\n        tex.minFilter = THREE.NearestFilter;\r\n        return tex;\r\n    }\r\n\r\n    function CreateThreeJsObject(voxelModels)\r\n    {\r\n        var group = new THREE.Group();\r\n\r\n        for (var i = 0; i < voxelModels.length; i++)\r\n        {\r\n            var model = CreateMesh(voxelModels[i]);\r\n            group.add(model);\r\n        }\r\n\r\n        return group;\r\n    }\r\n\r\n    function CreateMesh(voxelModel)\r\n    {\r\n        var tex = createPaletteTexture(voxelModel.palette);\r\n        var mat = new THREE.MeshLambertMaterial( { color: 0xFFFFFF, map: tex/*, wireframe: true*/});\r\n        mat.shading = THREE.SmoothShading;\r\n        var mesh = new THREE.Mesh(simpleMesher(voxelModel), mat);\r\n        if (voxelModel.pos)\r\n          mesh.position.set(voxelModel.pos.x+(voxelModel.dims.x/2), voxelModel.pos.y, voxelModel.pos.z);\r\n\r\n        mesh.castShadow = true;\r\n\r\n        var bbox = new THREE.Mesh(new THREE.BoxGeometry(voxelModel.dims.x, voxelModel.dims.y, voxelModel.dims.z), new THREE.MeshBasicMaterial( { color: 0x888888, wireframe: true } ) );\r\n        bbox.position.set(-0.5, -0.5, (voxelModel.dims.z)/2);\r\n        //bbox.position = THREE.GeometryUtils.center( mesh.geometry );\r\n        bbox.name = \"bbox\";\r\n        bbox.visible = false;\r\n        mesh.add(bbox);\r\n\r\n        //mesh.geometry.applyMatrix(new THREE.Matrix4().makeTranslation((-(voxelModel.dims.x)/2), (-(voxelModel.dims.y)/2), 0.5));\r\n        mesh.geometry.applyMatrix(new THREE.Matrix4().makeTranslation((-(voxelModel.dims.x)/2), (-(voxelModel.dims.y)/2), (-(voxelModel.dims.z)/2)));\r\n        mesh.rotation.x = voxelModel.rotateY*(Math.PI/180);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    function CheckModelFormat(fileName, view)\r\n    {\r\n        var fileExt = fileName.split('.').pop().toLowerCase();\r\n        var format = -1;\r\n\r\n        if (fileExt == \"vox\") // There are two vox formats so gotta check the magic\r\n        {\r\n            var magic = view.getString(4);\r\n\r\n            if (magic == \"VOX \")\r\n                format = formats.VOX;\r\n            else // Assume slab\r\n                format = formats.SLAB;\r\n        }\r\n        else if (fileExt == \"qb\")\r\n        {\r\n            format = formats.QB;\r\n        }\r\n\r\n        view.seek(0);\r\n\r\n        return format;\r\n    }\r\n\r\n    return self;\r\n}());","// .vox format loading\r\n//---------------------------\r\n(function (Core)\r\n{\r\n    var defaultPalette =\r\n    [\r\n        0x00000000, 0xffffffff, 0xffccffff, 0xff99ffff, 0xff66ffff, 0xff33ffff, 0xff00ffff, 0xffffccff, 0xffccccff, 0xff99ccff, 0xff66ccff, 0xff33ccff, 0xff00ccff, 0xffff99ff, 0xffcc99ff, 0xff9999ff,\r\n        0xff6699ff, 0xff3399ff, 0xff0099ff, 0xffff66ff, 0xffcc66ff, 0xff9966ff, 0xff6666ff, 0xff3366ff, 0xff0066ff, 0xffff33ff, 0xffcc33ff, 0xff9933ff, 0xff6633ff, 0xff3333ff, 0xff0033ff, 0xffff00ff,\r\n        0xffcc00ff, 0xff9900ff, 0xff6600ff, 0xff3300ff, 0xff0000ff, 0xffffffcc, 0xffccffcc, 0xff99ffcc, 0xff66ffcc, 0xff33ffcc, 0xff00ffcc, 0xffffcccc, 0xffcccccc, 0xff99cccc, 0xff66cccc, 0xff33cccc,\r\n        0xff00cccc, 0xffff99cc, 0xffcc99cc, 0xff9999cc, 0xff6699cc, 0xff3399cc, 0xff0099cc, 0xffff66cc, 0xffcc66cc, 0xff9966cc, 0xff6666cc, 0xff3366cc, 0xff0066cc, 0xffff33cc, 0xffcc33cc, 0xff9933cc,\r\n        0xff6633cc, 0xff3333cc, 0xff0033cc, 0xffff00cc, 0xffcc00cc, 0xff9900cc, 0xff6600cc, 0xff3300cc, 0xff0000cc, 0xffffff99, 0xffccff99, 0xff99ff99, 0xff66ff99, 0xff33ff99, 0xff00ff99, 0xffffcc99,\r\n        0xffcccc99, 0xff99cc99, 0xff66cc99, 0xff33cc99, 0xff00cc99, 0xffff9999, 0xffcc9999, 0xff999999, 0xff669999, 0xff339999, 0xff009999, 0xffff6699, 0xffcc6699, 0xff996699, 0xff666699, 0xff336699,\r\n        0xff006699, 0xffff3399, 0xffcc3399, 0xff993399, 0xff663399, 0xff333399, 0xff003399, 0xffff0099, 0xffcc0099, 0xff990099, 0xff660099, 0xff330099, 0xff000099, 0xffffff66, 0xffccff66, 0xff99ff66,\r\n        0xff66ff66, 0xff33ff66, 0xff00ff66, 0xffffcc66, 0xffcccc66, 0xff99cc66, 0xff66cc66, 0xff33cc66, 0xff00cc66, 0xffff9966, 0xffcc9966, 0xff999966, 0xff669966, 0xff339966, 0xff009966, 0xffff6666,\r\n        0xffcc6666, 0xff996666, 0xff666666, 0xff336666, 0xff006666, 0xffff3366, 0xffcc3366, 0xff993366, 0xff663366, 0xff333366, 0xff003366, 0xffff0066, 0xffcc0066, 0xff990066, 0xff660066, 0xff330066,\r\n        0xff000066, 0xffffff33, 0xffccff33, 0xff99ff33, 0xff66ff33, 0xff33ff33, 0xff00ff33, 0xffffcc33, 0xffcccc33, 0xff99cc33, 0xff66cc33, 0xff33cc33, 0xff00cc33, 0xffff9933, 0xffcc9933, 0xff999933,\r\n        0xff669933, 0xff339933, 0xff009933, 0xffff6633, 0xffcc6633, 0xff996633, 0xff666633, 0xff336633, 0xff006633, 0xffff3333, 0xffcc3333, 0xff993333, 0xff663333, 0xff333333, 0xff003333, 0xffff0033,\r\n        0xffcc0033, 0xff990033, 0xff660033, 0xff330033, 0xff000033, 0xffffff00, 0xffccff00, 0xff99ff00, 0xff66ff00, 0xff33ff00, 0xff00ff00, 0xffffcc00, 0xffcccc00, 0xff99cc00, 0xff66cc00, 0xff33cc00,\r\n        0xff00cc00, 0xffff9900, 0xffcc9900, 0xff999900, 0xff669900, 0xff339900, 0xff009900, 0xffff6600, 0xffcc6600, 0xff996600, 0xff666600, 0xff336600, 0xff006600, 0xffff3300, 0xffcc3300, 0xff993300,\r\n        0xff663300, 0xff333300, 0xff003300, 0xffff0000, 0xffcc0000, 0xff990000, 0xff660000, 0xff330000, 0xff0000ee, 0xff0000dd, 0xff0000bb, 0xff0000aa, 0xff000088, 0xff000077, 0xff000055, 0xff000044,\r\n        0xff000022, 0xff000011, 0xff00ee00, 0xff00dd00, 0xff00bb00, 0xff00aa00, 0xff008800, 0xff007700, 0xff005500, 0xff004400, 0xff002200, 0xff001100, 0xffee0000, 0xffdd0000, 0xffbb0000, 0xffaa0000,\r\n        0xff880000, 0xff770000, 0xff550000, 0xff440000, 0xff220000, 0xff110000, 0xffeeeeee, 0xffdddddd, 0xffbbbbbb, 0xffaaaaaa, 0xff888888, 0xff777777, 0xff555555, 0xff444444, 0xff222222, 0xff111111\r\n    ];\r\n\r\n    var consts =\r\n    {\r\n        MAGIC: \"VOX \",\r\n        VERSION: 150\r\n    };\r\n\r\n    function ReadChunkHeader(view)\r\n    {\r\n        var head = {};\r\n        head.id = view.getString(4);\r\n        head.size = view.getInt32();\r\n        head.childSize = view.getInt32();\r\n\r\n        return head;\r\n    }\r\n\r\n    Core.LoadVox = function(view, dataLen)\r\n    {\r\n        var sizeX, sizeY, sizeZ;\r\n        var voxels = [];\r\n        var colors = null;\r\n\r\n        var magic = [view.getChar(), view.getChar(), view.getChar(), view.getChar()].join(\"\");\r\n        if (magic != consts.MAGIC) { console.error(\"Bad magic, was \"+magic+\" should be \"+consts.MAGIC); return null; }\r\n\r\n        var version = view.getInt32();\r\n        if (version > consts.VERSION) { console.error(\"Bad version, please use \"+ consts.VERSION +\", file had \" + version); return null; }\r\n\r\n        var mainHead = ReadChunkHeader(view);\r\n        if (mainHead.id == \"MAIN\")\r\n        {\r\n            while (view.tell() < dataLen)\r\n            {\r\n                var chunkHead = ReadChunkHeader(view);\r\n\r\n                if (chunkHead.id == \"SIZE\")\r\n                {\r\n                    sizeX = view.getUint32();\r\n                    sizeY = view.getUint32();\r\n                    sizeZ = view.getUint32();\r\n                }\r\n                else if (chunkHead.id == \"XYZI\")\r\n                {\r\n                    var numVoxels = view.getInt32();\r\n\r\n                    for (var i = 0; i < numVoxels; i++)\r\n                    {\r\n                        var voxel = {};\r\n                        voxel.x = view.getUint8();\r\n                        voxel.y = view.getUint8();\r\n                        voxel.z = view.getUint8();\r\n                        voxel.colorIdx = view.getUint8();\r\n\r\n                        voxels.push(voxel);\r\n                    }\r\n                }\r\n                else if (chunkHead.id == \"RGBA\")\r\n                {\r\n                    colors = [];\r\n\r\n                    for (var i = 0; i < 255; i++)\r\n                    {\r\n                        colors.push(view.getUint32());\r\n                    }\r\n                    view.getUint32()\r\n                }\r\n                else\r\n                {\r\n                    console.log(\"Skipping unknown chunk: \"+chunkHead.is);\r\n                    view.skip(chunkHead.size);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        // Convert to a standard format now that all chunks are loaded\r\n        var voxelData = {};\r\n        voxelData.dims =\r\n        {\r\n            x: sizeX,\r\n            y: sizeY,\r\n            z: sizeZ\r\n        };\r\n\r\n        /*voxelData.pos =\r\n        {\r\n            x: -sizeX/2,\r\n            y: sizeY/2,\r\n            z: 0\r\n        };*/\r\n\r\n        voxelData.palette = [];\r\n        voxelData.voxels = new Uint8Array(sizeX * sizeY * sizeZ);\r\n\r\n        for (var i = 0; i < voxels.length; i++)\r\n        {\r\n            var voxel = voxels[i];\r\n            voxelData.voxels[Core.get3dArrayIdx(voxelData.dims, voxel.x, voxel.y, voxel.z)] = voxel.colorIdx;\r\n        }\r\n\r\n        voxelData.palette = (colors != null) ? colors : defaultPalette;\r\n        voxelData.nullColor = 0;\r\n        voxelData.numColors = 256;\r\n        voxelData.rotateY = 270;\r\n\r\n        return [voxelData];\r\n    };\r\n}(Voxii));","// .vox slab format loading\r\n//---------------------------\r\n(function (Core)\r\n{\r\n\r\n    Core.LoadSlab = function(view, dataLen)\r\n    {\r\n        var voxelData = {};\r\n\r\n        voxelData.dims =\r\n        {\r\n            x: view.getInt32(),\r\n            y: view.getInt32(),\r\n            z: view.getInt32()\r\n        };\r\n\r\n        voxelData.voxels = new Uint8Array(voxelData.dims.x * voxelData.dims.y * voxelData.dims.z);\r\n\r\n        for (var x = 0; x < voxelData.dims.x; x++)\r\n        {\r\n            for (var y = 0; y < voxelData.dims.y; y++)\r\n            {\r\n                for (var z = voxelData.dims.z; z > 0; z--)\r\n                {\r\n                    var i = Core.get3dArrayIdx(voxelData.dims, x, y, z-1);\r\n                    var colorIdx = view.getUint8();\r\n                    voxelData.voxels[i] = colorIdx;\r\n                }\r\n            }\r\n        }\r\n\r\n        voxelData.palette = [];\r\n        for (var i = 0; i < 256; i++)\r\n        {\r\n            var color = view.getUint8() | ((view.getUint8() & 0xff) << 8) | ((view.getUint8() & 0xff) << 16) | (255 & 0xff) << 24;\r\n            voxelData.palette.push(color);\r\n        }\r\n\r\n        voxelData.nullColor = 255;\r\n        voxelData.numColors = 256;\r\n        voxelData.rotateY = 270;\r\n        return [voxelData];\r\n    };\r\n\r\n}(Voxii));","// .vox slab format loading\r\n//---------------------------\r\n(function (Core)\r\n{\r\n\r\n    Core.LoadQb = function(view, dataLen)\r\n    {\r\n        var version = view.getInt32();\r\n        var colorFormat = view.getInt32();\r\n        var zAxisOrientation = view.getInt32();\r\n        var compressed = view.getInt32();\r\n        var visibilityMaskEncoded = view.getInt32();\r\n        var numMatrices = view.getInt32();\r\n\r\n        var models = [];\r\n        // Only support one matrix for now\r\n        for (var matID = 0; matID < numMatrices; matID++)\r\n        {\r\n            var voxelData = {};\r\n            var matrixName = view.getString(view.getUint8());\r\n\r\n            voxelData.dims =\r\n            {\r\n                x: view.getUint32(),\r\n                y: view.getUint32(),\r\n                z: view.getUint32()\r\n            };\r\n\r\n            voxelData.pos =\r\n            {\r\n                x: view.getInt32(),\r\n                y: (view.getInt32()+voxelData.dims.y/2),\r\n                z: view.getInt32()\r\n            };\r\n\r\n            var getColorIdx = function(color)\r\n            {\r\n                var mask = color >> 24 & 255;\r\n                var colorIdx = voxelData.palette.indexOf(color);\r\n                if (colorIdx == -1)\r\n                {\r\n                    voxelData.palette.push(color);\r\n                    colorIdx = voxelData.palette.length-1;\r\n                }\r\n\r\n                colorIdx = (mask == 0) ? 255 : colorIdx;\r\n                return colorIdx;\r\n            };\r\n\r\n            voxelData.voxels = new Uint8Array(voxelData.dims.x * voxelData.dims.y * voxelData.dims.z);\r\n            voxelData.palette = [];\r\n\r\n            if (compressed == 0)\r\n            {\r\n                for(z = 0; z < voxelData.dims.z; z++)\r\n                {\r\n                    for(y = 0; y < voxelData.dims.y; y++)\r\n                    {\r\n                        for(x = 0; x < voxelData.dims.x; x++)\r\n                        {\r\n                            voxelData.voxels[Core.get3dArrayIdx(voxelData.dims, x, y, z)] = getColorIdx(view.getUint32());\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else // if compressed\r\n            {\r\n                for (var z = 0; z < voxelData.dims.z; z++)\r\n                {\r\n                    var index = 0;\r\n\r\n                    while (true)\r\n                    {\r\n                        var data = view.getUint32();\r\n\r\n                        if (data == 6)\r\n                            break;\r\n                        else if (data == 2)\r\n                        {\r\n                            var count = view.getUint32();\r\n                            data = view.getUint32();\r\n\r\n                            for(j = 0; j < count; j++)\r\n                            {\r\n                                var x = index % voxelData.dims.x;\r\n                                var y = Math.floor(index / voxelData.dims.x);\r\n                                index++;\r\n\r\n                                voxelData.voxels[Core.get3dArrayIdx(voxelData.dims, x, y, z)] = getColorIdx(data);\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n                            var x = index % voxelData.dims.x;\r\n                            var y = Math.floor(index / voxelData.dims.x);\r\n                            index++;\r\n\r\n                            voxelData.voxels[Core.get3dArrayIdx(voxelData.dims, x, y, z)] = getColorIdx(data);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            //console.dir(voxelData);\r\n            voxelData.nullColor = 255;\r\n            voxelData.numColors = voxelData.palette.length;\r\n            voxelData.rotateY = zAxisOrientation == 0 ? 0 : 270;\r\n            models.push(voxelData);\r\n        }\r\n\r\n\r\n        return models;\r\n    };\r\n\r\n}(Voxii));","// For easily embedding models\r\n//---------------------------\r\n(function (Core)\r\n{\r\n    var embeds = [];\r\n    var activeEmbed = null;\r\n    var clock = new THREE.Clock();\r\n\r\n    Core.EmbedConf =\r\n    {\r\n        Classname: \"VoxiiEmbed\",\r\n        Background: \"resources/embedBG.jpg\",\r\n        TransparentCanvas: true,\r\n        Fov: 75\r\n\r\n    };\r\n\r\n    Core.CreateEmbeds = function()\r\n    {\r\n        console.log(\"CreateEmbeds\");\r\n        var elements = document.querySelectorAll('.'+ Core.EmbedConf.Classname);\r\n\r\n        for (var i = 0; i < elements.length; i++)\r\n        {\r\n            CreateEmbed(Core.EmbedConf, elements[i]);\r\n        }\r\n\r\n        Update();\r\n        Render();\r\n    };\r\n\r\n    function CreateEmbed(opts, parentElm)\r\n    {\r\n        var width = parentElm.clientWidth;\r\n        var height = parentElm.clientHeight;\r\n\r\n        var canvas = document.createElement('canvas');\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        canvas.style.zIndex = 5;\r\n\r\n        var embed = CreateBasicStage(canvas);\r\n        embed.clickDiv = CreateClickToLoadDiv(parentElm, embed);\r\n        parentElm.appendChild(canvas);\r\n\r\n        embed.conf = {\r\n            modelPath: parentElm.getAttribute(\"data-VoxiiModel\")\r\n        };\r\n        embeds.push(embed);\r\n    }\r\n\r\n    function CreateBasicStage(canvas)\r\n    {\r\n        var embed = {\r\n            renderer: null,\r\n            scene: null,\r\n            camera: null,\r\n            controls: null,\r\n            voxModel: null\r\n        };\r\n\r\n        embed.renderer = new THREE.WebGLRenderer({canvas: canvas, antialias: true, alpha: Core.EmbedConf.TransparentCanvas});\r\n        embed.renderer.setSize(canvas.width, canvas.height);\r\n        embed.renderer.shadowMapEnabled = true;\r\n        embed.renderer.shadowMapSoft = true;\r\n\r\n        embed.scene = new THREE.Scene();\r\n\r\n        embed.camera = new THREE.PerspectiveCamera(Core.EmbedConf.Fov, canvas.width / canvas.height, 5, 3000);\r\n        embed.camera.position.set(-30, 20, 30);\r\n        embed.camera.lookAt(embed.scene.position);\r\n\r\n        // Set up controls\r\n        embed.controls = new THREE.OrbitControls(embed.camera, canvas);\r\n        embed.controls.damping = 0.2;\r\n        embed.controls.addEventListener( 'change', function()\r\n        {\r\n            if (embed != activeEmbed)\r\n                SetActiveEmbed(embed);\r\n\r\n            Render();\r\n        });\r\n\r\n        var amblight = new THREE.AmbientLight(0x666666);\r\n        amblight.color.setRGB(0.859 * 0.2, 0.976 * 0.2, 1 * 0.2);\r\n        embed.scene.add(amblight);\r\n\r\n        // Fill light\r\n        var fill = new THREE.SpotLight(0x8AD8FF);\r\n        fill.position.set( 75, 70, 80 );\r\n        fill.target.position.set(0, 0, 0);\r\n        fill.shadowCameraNear = 1;\r\n        fill.shadowCameraFar = 200;\r\n        fill.shadowCameraVisible = true;\r\n        fill.intensity = 0.4;\r\n        embed.scene.add(fill);\r\n\r\n        var back = new THREE.SpotLight(0xFF697A);\r\n        back.position.set( 0, 50, -80 );\r\n        back.target.position.set(0, 0, 0);\r\n        back.shadowCameraNear = 1;\r\n        back.shadowCameraFar = 200;\r\n        back.shadowCameraVisible = true;\r\n        back.intensity = 0.5;\r\n        embed.scene.add(back);\r\n\r\n        var key = new THREE.SpotLight(0xF6FF94);\r\n        key.position.set( -75, 70, 80 );\r\n        key.target.position.set(0, 2.5, 0);\r\n        key.shadowCameraNear = 1;\r\n        key.shadowCameraFar = 200;\r\n        key.castShadow = true;\r\n        key.intensity = 0.9;\r\n        key.shadowMapWidth = 2048;\r\n        key.shadowMapHeight = 2048;\r\n        var d = 50;\r\n        key.shadowCameraLeft = -d;\r\n        key.shadowCameraRight = d;\r\n        key.shadowCameraTop = d;\r\n        key.shadowCameraBottom = -d;\r\n        key.shadowCameraFar = 3500;\r\n        key.shadowBias = -0.0001;\r\n        key.shadowDarkness = 0.35;\r\n        embed.scene.add(key);\r\n\r\n        return embed;\r\n    }\r\n\r\n    function SetActiveEmbed(embed)\r\n    {\r\n        if (activeEmbed)\r\n        {\r\n            activeEmbed.clickDiv.style.visibility = \"visible\";\r\n            activeEmbed.scene.remove(activeEmbed.voxModel);\r\n            activeEmbed.voxModel = null;\r\n            Render();\r\n        }\r\n\r\n        // TODO: Thread load\r\n        Core.LoadModel(embed.conf.modelPath, function(mesh, voxelData)\r\n        {\r\n            embed.clickDiv.style.visibility = \"hidden\";\r\n            activeEmbed = embed;\r\n            activeEmbed.voxModel = mesh;\r\n\r\n            // Center the mesh on the\r\n            activeEmbed.scene.add(activeEmbed.voxModel);\r\n            Render();\r\n        });\r\n    }\r\n\r\n    function CalcStarCameraPos()\r\n    {\r\n        if (activeEmbed.voxModel)\r\n        {\r\n            //activeEmbed.voxModel.\r\n        }\r\n    }\r\n\r\n    function Render()\r\n    {\r\n        if (activeEmbed)\r\n        {\r\n            activeEmbed.renderer.render(activeEmbed.scene, activeEmbed.camera);\r\n        }\r\n    }\r\n\r\n    // I dunno what else to name it D:\r\n    function CreateClickToLoadDiv(parent, embed)\r\n    {\r\n        var cont = document.createElement('div');\r\n        cont.style.position = \"absolute\";\r\n        var div = document.createElement('div');\r\n        cont.appendChild(div);\r\n\r\n        div.style.width = parent.clientWidth+\"px\";\r\n        div.style.height = \"100px\";\r\n        div.style.position = \"relative\";\r\n        div.style.float = \"left\";\r\n        div.style.top = (parent.clientHeight/2)-50+\"px\";\r\n        div.style.background = \"rgba(1, 1, 1, 0.8)\";\r\n        div.style.color = \"white\";\r\n        div.style.fontSize = \"30px\";\r\n        div.style.textAlign = \"center\";\r\n        div.style.fontFamily = \"Helvetica\";\r\n        div.style.lineHeight = \"100px\";\r\n        div.style.userSelect = \"none\";\r\n        div.style.MozUserSelect = \"none\";\r\n        div.style.webkitUserSelect = \"none\";\r\n        div.innerHTML = \"Click to load model\";\r\n        div.onclick = function() { SetActiveEmbed(embed); };\r\n        parent.appendChild(cont);\r\n\r\n        return cont;\r\n    }\r\n\r\n    function Update()\r\n    {\r\n        requestAnimationFrame(Update);\r\n\r\n        if (activeEmbed)\r\n        {\r\n            var delta = clock.getDelta();\r\n            activeEmbed.controls.update();\r\n        }\r\n    }\r\n\r\n}(Voxii));","/**\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n */\n/*global THREE, console */\n\n// This set of controls performs orbiting, dollying (zooming), and panning. It maintains\n// the \"up\" direction as +Y, unlike the TrackballControls. Touch on tablet and phones is\n// supported.\n//\n//    Orbit - left mouse / touch: one finger move\n//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n//    Pan - right mouse, or arrow keys / touch: three finter swipe\n\nTHREE.OrbitControls = function ( object, domElement ) {\n\n\tthis.object = object;\n\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\n\n\t// API\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the control orbits around\n\t// and where it pans with respect to.\n\tthis.target = new THREE.Vector3();\n\n\t// center is old, deprecated; use \"target\" instead\n\tthis.center = this.target;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for\n\t// backwards compatibility\n\tthis.noZoom = false;\n\tthis.zoomSpeed = 1.0;\n\n\t// Limits to how far you can dolly in and out ( PerspectiveCamera only )\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// Limits to how far you can zoom in and out ( OrthographicCamera only )\n\tthis.minZoom = 0;\n\tthis.maxZoom = Infinity;\n\n\t// Set to true to disable this control\n\tthis.noRotate = false;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to true to disable this control\n\tthis.noPan = false;\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// How far you can orbit horizontally, upper and lower limits.\n\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\tthis.minAzimuthAngle = - Infinity; // radians\n\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t// Set to true to disable use of the keys\n\tthis.noKeys = false;\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t// Mouse buttons\n\tthis.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };\n\n\t////////////\n\t// internals\n\n\tvar scope = this;\n\n\tvar EPS = 0.000001;\n\n\tvar rotateStart = new THREE.Vector2();\n\tvar rotateEnd = new THREE.Vector2();\n\tvar rotateDelta = new THREE.Vector2();\n\n\tvar panStart = new THREE.Vector2();\n\tvar panEnd = new THREE.Vector2();\n\tvar panDelta = new THREE.Vector2();\n\tvar panOffset = new THREE.Vector3();\n\n\tvar offset = new THREE.Vector3();\n\n\tvar dollyStart = new THREE.Vector2();\n\tvar dollyEnd = new THREE.Vector2();\n\tvar dollyDelta = new THREE.Vector2();\n\n\tvar theta;\n\tvar phi;\n\tvar phiDelta = 0;\n\tvar thetaDelta = 0;\n\tvar scale = 1;\n\tvar pan = new THREE.Vector3();\n\n\tvar lastPosition = new THREE.Vector3();\n\tvar lastQuaternion = new THREE.Quaternion();\n\n\tvar STATE = { NONE : -1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\n\n\tvar state = STATE.NONE;\n\n\t// for reset\n\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\tthis.zoom0 = this.object.zoom;\n\n\t// so camera.up is the orbit axis\n\n\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\tvar quatInverse = quat.clone().inverse();\n\n\t// events\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start' };\n\tvar endEvent = { type: 'end' };\n\n\tthis.rotateLeft = function ( angle ) {\n\n\t\tif ( angle === undefined ) {\n\n\t\t\tangle = getAutoRotationAngle();\n\n\t\t}\n\n\t\tthetaDelta -= angle;\n\n\t};\n\n\tthis.rotateUp = function ( angle ) {\n\n\t\tif ( angle === undefined ) {\n\n\t\t\tangle = getAutoRotationAngle();\n\n\t\t}\n\n\t\tphiDelta -= angle;\n\n\t};\n\n\t// pass in distance in world space to move left\n\tthis.panLeft = function ( distance ) {\n\n\t\tvar te = this.object.matrix.elements;\n\n\t\t// get X column of matrix\n\t\tpanOffset.set( te[ 0 ], te[ 1 ], te[ 2 ] );\n\t\tpanOffset.multiplyScalar( - distance );\n\n\t\tpan.add( panOffset );\n\n\t};\n\n\t// pass in distance in world space to move up\n\tthis.panUp = function ( distance ) {\n\n\t\tvar te = this.object.matrix.elements;\n\n\t\t// get Y column of matrix\n\t\tpanOffset.set( te[ 4 ], te[ 5 ], te[ 6 ] );\n\t\tpanOffset.multiplyScalar( distance );\n\n\t\tpan.add( panOffset );\n\n\t};\n\n\t// pass in x,y of change desired in pixel space,\n\t// right and down are positive\n\tthis.pan = function ( deltaX, deltaY ) {\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t// perspective\n\t\t\tvar position = scope.object.position;\n\t\t\tvar offset = position.clone().sub( scope.target );\n\t\t\tvar targetDistance = offset.length();\n\n\t\t\t// half of the fov is center to top of screen\n\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t// we actually don't use screenWidth, since perspective camera is fixed to screen height\n\t\t\tscope.panLeft( 2 * deltaX * targetDistance / element.clientHeight );\n\t\t\tscope.panUp( 2 * deltaY * targetDistance / element.clientHeight );\n\n\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t// orthographic\n\t\t\tscope.panLeft( deltaX * (scope.object.right - scope.object.left) / element.clientWidth );\n\t\t\tscope.panUp( deltaY * (scope.object.top - scope.object.bottom) / element.clientHeight );\n\n\t\t} else {\n\n\t\t\t// camera neither orthographic or perspective\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\n\t\t}\n\n\t};\n\n\tthis.dollyIn = function ( dollyScale ) {\n\n\t\tif ( dollyScale === undefined ) {\n\n\t\t\tdollyScale = getZoomScale();\n\n\t\t}\n\n\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\tscale /= dollyScale;\n\n\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( this.minZoom, Math.min( this.maxZoom, this.object.zoom * dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\n\t\t}\n\n\t};\n\n\tthis.dollyOut = function ( dollyScale ) {\n\n\t\tif ( dollyScale === undefined ) {\n\n\t\t\tdollyScale = getZoomScale();\n\n\t\t}\n\n\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\tscale *= dollyScale;\n\n\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( this.minZoom, Math.min( this.maxZoom, this.object.zoom / dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\n\t\t}\n\n\t};\n\n\tthis.update = function () {\n\n\t\tvar position = this.object.position;\n\n\t\toffset.copy( position ).sub( this.target );\n\n\t\t// rotate offset to \"y-axis-is-up\" space\n\t\toffset.applyQuaternion( quat );\n\n\t\t// angle from z-axis around y-axis\n\n\t\ttheta = Math.atan2( offset.x, offset.z );\n\n\t\t// angle from y-axis\n\n\t\tphi = Math.atan2( Math.sqrt( offset.x * offset.x + offset.z * offset.z ), offset.y );\n\n\t\tif ( this.autoRotate && state === STATE.NONE ) {\n\n\t\t\tthis.rotateLeft( getAutoRotationAngle() );\n\n\t\t}\n\n\t\ttheta += thetaDelta;\n\t\tphi += phiDelta;\n\n\t\t// restrict theta to be between desired limits\n\t\ttheta = Math.max( this.minAzimuthAngle, Math.min( this.maxAzimuthAngle, theta ) );\n\n\t\t// restrict phi to be between desired limits\n\t\tphi = Math.max( this.minPolarAngle, Math.min( this.maxPolarAngle, phi ) );\n\n\t\t// restrict phi to be betwee EPS and PI-EPS\n\t\tphi = Math.max( EPS, Math.min( Math.PI - EPS, phi ) );\n\n\t\tvar radius = offset.length() * scale;\n\n\t\t// restrict radius to be between desired limits\n\t\tradius = Math.max( this.minDistance, Math.min( this.maxDistance, radius ) );\n\n\t\t// move target to panned location\n\t\tthis.target.add( pan );\n\n\t\toffset.x = radius * Math.sin( phi ) * Math.sin( theta );\n\t\toffset.y = radius * Math.cos( phi );\n\t\toffset.z = radius * Math.sin( phi ) * Math.cos( theta );\n\n\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\toffset.applyQuaternion( quatInverse );\n\n\t\tposition.copy( this.target ).add( offset );\n\n\t\tthis.object.lookAt( this.target );\n\n\t\tthetaDelta = 0;\n\t\tphiDelta = 0;\n\t\tscale = 1;\n\t\tpan.set( 0, 0, 0 );\n\n\t\t// update condition is:\n\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\tif ( lastPosition.distanceToSquared( this.object.position ) > EPS\n\t\t    || 8 * (1 - lastQuaternion.dot(this.object.quaternion)) > EPS ) {\n\n\t\t\tthis.dispatchEvent( changeEvent );\n\n\t\t\tlastPosition.copy( this.object.position );\n\t\t\tlastQuaternion.copy (this.object.quaternion );\n\n\t\t}\n\n\t};\n\n\n\tthis.reset = function () {\n\n\t\tstate = STATE.NONE;\n\n\t\tthis.target.copy( this.target0 );\n\t\tthis.object.position.copy( this.position0 );\n\t\tthis.object.zoom = this.zoom0;\n\n\t\tthis.object.updateProjectionMatrix();\n\t\tthis.dispatchEvent( changeEvent );\n\n\t\tthis.update();\n\n\t};\n\n\tthis.getPolarAngle = function () {\n\n\t\treturn phi;\n\n\t};\n\n\tthis.getAzimuthalAngle = function () {\n\n\t\treturn theta\n\n\t};\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction onMouseDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\t\tevent.preventDefault();\n\n\t\tif ( event.button === scope.mouseButtons.ORBIT ) {\n\t\t\tif ( scope.noRotate === true ) return;\n\n\t\t\tstate = STATE.ROTATE;\n\n\t\t\trotateStart.set( event.clientX, event.clientY );\n\n\t\t} else if ( event.button === scope.mouseButtons.ZOOM ) {\n\t\t\tif ( scope.noZoom === true ) return;\n\n\t\t\tstate = STATE.DOLLY;\n\n\t\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t\t} else if ( event.button === scope.mouseButtons.PAN ) {\n\t\t\tif ( scope.noPan === true ) return;\n\n\t\t\tstate = STATE.PAN;\n\n\t\t\tpanStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\n\t\t\tscope.dispatchEvent( startEvent );\n\t\t}\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\tif ( state === STATE.ROTATE ) {\n\n\t\t\tif ( scope.noRotate === true ) return;\n\n\t\t\trotateEnd.set( event.clientX, event.clientY );\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\tscope.rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\tscope.rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\t\trotateStart.copy( rotateEnd );\n\n\t\t} else if ( state === STATE.DOLLY ) {\n\n\t\t\tif ( scope.noZoom === true ) return;\n\n\t\t\tdollyEnd.set( event.clientX, event.clientY );\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\tscope.dollyIn();\n\n\t\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\t\tscope.dollyOut();\n\n\t\t\t}\n\n\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t} else if ( state === STATE.PAN ) {\n\n\t\t\tif ( scope.noPan === true ) return;\n\n\t\t\tpanEnd.set( event.clientX, event.clientY );\n\t\t\tpanDelta.subVectors( panEnd, panStart );\n\n\t\t\tscope.pan( panDelta.x, panDelta.y );\n\n\t\t\tpanStart.copy( panEnd );\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) scope.update();\n\n\t}\n\n\tfunction onMouseUp( /* event */ ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\t\tscope.dispatchEvent( endEvent );\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.noZoom === true || state !== STATE.NONE ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tvar delta = 0;\n\n\t\tif ( event.wheelDelta !== undefined ) { // WebKit / Opera / Explorer 9\n\n\t\t\tdelta = event.wheelDelta;\n\n\t\t} else if ( event.detail !== undefined ) { // Firefox\n\n\t\t\tdelta = - event.detail;\n\n\t\t}\n\n\t\tif ( delta > 0 ) {\n\n\t\t\tscope.dollyOut();\n\n\t\t} else if ( delta < 0 ) {\n\n\t\t\tscope.dollyIn();\n\n\t\t}\n\n\t\tscope.update();\n\t\tscope.dispatchEvent( startEvent );\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.noKeys === true || scope.noPan === true ) return;\n\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tscope.pan( 0, scope.keyPanSpeed );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tscope.pan( 0, - scope.keyPanSpeed );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tscope.pan( scope.keyPanSpeed, 0 );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tscope.pan( - scope.keyPanSpeed, 0 );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction touchstart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\t// one-fingered touch: rotate\n\n\t\t\t\tif ( scope.noRotate === true ) return;\n\n\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\t// two-fingered touch: dolly\n\n\t\t\t\tif ( scope.noZoom === true ) return;\n\n\t\t\t\tstate = STATE.TOUCH_DOLLY;\n\n\t\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\t\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\t\t\t\tdollyStart.set( 0, distance );\n\t\t\t\tbreak;\n\n\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\tif ( scope.noPan === true ) return;\n\n\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) scope.dispatchEvent( startEvent );\n\n\t}\n\n\tfunction touchmove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1: // one-fingered touch: rotate\n\n\t\t\t\tif ( scope.noRotate === true ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return;\n\n\t\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\t\tscope.rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\t\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\t\tscope.rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\t\t\trotateStart.copy( rotateEnd );\n\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase 2: // two-fingered touch: dolly\n\n\t\t\t\tif ( scope.noZoom === true ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_DOLLY ) return;\n\n\t\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\t\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\t\tdollyEnd.set( 0, distance );\n\t\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\t\tscope.dollyOut();\n\n\t\t\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\t\t\tscope.dollyIn();\n\n\t\t\t\t}\n\n\t\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\tif ( scope.noPan === true ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_PAN ) return;\n\n\t\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\t\tpanDelta.subVectors( panEnd, panStart );\n\n\t\t\t\tscope.pan( panDelta.x, panDelta.y );\n\n\t\t\t\tpanStart.copy( panEnd );\n\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction touchend( /* event */ ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tscope.dispatchEvent( endEvent );\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tthis.domElement.addEventListener( 'contextmenu', function ( event ) { event.preventDefault(); }, false );\n\tthis.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\tthis.domElement.addEventListener( 'mousewheel', onMouseWheel, false );\n\tthis.domElement.addEventListener( 'DOMMouseScroll', onMouseWheel, false ); // firefox\n\n\tthis.domElement.addEventListener( 'touchstart', touchstart, false );\n\tthis.domElement.addEventListener( 'touchend', touchend, false );\n\tthis.domElement.addEventListener( 'touchmove', touchmove, false );\n\n\twindow.addEventListener( 'keydown', onKeyDown, false );\n\n\t// force an update at start\n\tthis.update();\n\n};\n\nTHREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nTHREE.OrbitControls.prototype.constructor = THREE.OrbitControls;\n"],"sourceRoot":"/source/"}